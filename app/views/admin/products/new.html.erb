<%= content_for :title, "Registrar Producto" %>

<section class="container mt-5">
  <!-- Título -->
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="text-secondary fw-bold">Registrar Producto</h1>
    <%= link_to 'Volver a Productos', admin_products_path, class: 'btn btn-outline-secondary' %>
  </div>
  <% if flash.now[:error].present? %>
    <div class="alert alert-danger">
        <%= flash.now[:error] %>
    </div>
    <% end %>

  <%= form_with(model: @product, url: admin_products_path, method: :post, local: true, html: { multipart: true }) do |form| %>
    <div class="mb-3">
      <%= form.label :name, "Nombre del Producto", class: "form-label" %>
      <%= form.text_field :name, class: "form-control" %>
    </div>
  
    <div class="mb-3">
      <%= form.label :description, "Descripción", class: "form-label" %>
      <%= form.text_area :description, class: "form-control" %>
    </div>
  
    <div class="mb-3">
      <%= form.label :price, "Precio", class: "form-label" %>
      <%= form.number_field :price, class: "form-control", step: 0.01 %>
    </div>
  
    <div class="mb-3">
      <%= form.label :stock, "Stock", class: "form-label" %>
      <%= form.number_field :stock, class: "form-control" %>
    </div>
  
    <div class="mb-3">
      <%= form.label :category_id, "Categoría", class: "form-label" %>
      <%= form.collection_select :category_id, Category.all, :id, :name, { prompt: "Seleccione una categoría" }, class: "form-control" %>
    </div>
  
    <div class="mb-3">
      <%= form.label :color, "Color", class: "form-label" %>
      <%= form.text_field :color, class: "form-control" %>
    </div>
  
    <div class="mb-3">
      <%= form.label :size, "Tamaño", class: "form-label" %>
      <%= form.text_field :size, class: "form-control" %>
    </div>
  
    <div class="mb-3">
      <%= form.label :images, "Seleccionar imágenes", class: "form-label" %>
      <%= form.file_field :images,multiple: true, class: "form-control",accept: "image/*" ,id: "image-input" %>
    </div>
  
    <!-- Contenedor para vista previa -->
    <div id="image-preview-container" class="d-flex flex-wrap mt-3">
      <!-- La vista previa dinámica se generará aquí -->
    </div>
  
    <%= form.submit "Crear producto", class: "btn btn-primary mt-3" %>
  <% end %>
  
  <script>
  document.addEventListener("DOMContentLoaded", () => {
    const imageInput = document.getElementById("image-input");
    const previewContainer = document.getElementById("image-preview-container");
  
    let selectedFiles = []; // Array para almacenar los archivos seleccionados.
  
    imageInput.addEventListener("change", (event) => {
      const files = Array.from(event.target.files);
  
      // Agregar los nuevos archivos al array de seleccionados.
      selectedFiles.push(...files);
  
      // Actualizar la previsualización.
      files.forEach((file, index) => {
        const reader = new FileReader();
  
        reader.onload = (e) => {
          const previewDiv = document.createElement("div");
          previewDiv.className = "image-preview me-3 mb-3 position-relative";
          previewDiv.dataset.index = selectedFiles.length - files.length + index; // Guardar índice.
  
          const img = document.createElement("img");
          img.src = e.target.result;
          img.className = "img-thumbnail";
          img.style.width = "150px";
          img.style.height = "150px";
  
          const removeButton = document.createElement("button");
          removeButton.className = "btn btn-danger btn-sm position-absolute top-0 end-0";
          removeButton.textContent = "Eliminar";
  
          // Eliminar la imagen de la previsualización y del array.
          removeButton.addEventListener("click", () => {
            const indexToRemove = parseInt(previewDiv.dataset.index, 10);
            selectedFiles = selectedFiles.filter((_, i) => i !== indexToRemove);
            updateImageInput();
            previewDiv.remove();
          });
  
          previewDiv.appendChild(img);
          previewDiv.appendChild(removeButton);
          previewContainer.appendChild(previewDiv);
        };
  
        reader.readAsDataURL(file);
      });
  
      // Actualizar el campo de entrada con los archivos seleccionados.
      updateImageInput();
    });
  
    // Función para actualizar el contenido del input.
    function updateImageInput() {
      const dataTransfer = new DataTransfer();
      selectedFiles.forEach((file) => dataTransfer.items.add(file));
      imageInput.files = dataTransfer.files;
    }
  });
  </script>
  
  
  
</section>